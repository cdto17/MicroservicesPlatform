name: Build and Push Docker Images

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      

      
    - name: Sign in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
       
        
    - name: Build and upload Docker images
      run: |
        services=("list-services" "songs-service" "video-service")
        
        for service in "${services[@]}"
        do
          if [ -d "$service" ]; then
            docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest ./$service
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest
          else
            echo "Could not find directory for service $service"
            exit 1
          fi
        done

    - name: Fix routes in docker-compose.yml
      run: |
        sed -i 's|build: \./|build: ../|g' ./docker/docker-compose.yml
        echo "Updated content from docker-compose.yml:"
        cat ./docker/docker-compose.yml

    - name: Execute Docker Compose
      run: |
        docker-compose -f ./docker/docker-compose.yml up -d

  deploy-AWS:
    needs: [build-and-push]  
    runs-on: ubuntu-latest

    steps:

    - name: Set permissions for private key
      run: |
        echo "${{ secrets.AWS_PRIVATE_KEY }}" > key.pem
        chmod 600 key.pem

    
    - name: Pull Docker images
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/video-service:latest'
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/songs-service:latest'
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/list-services:latest'
        
    - name: Stop running containers
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker stop video-service-plataform-aws || true'
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker rm video-service-plataform-aws || true'
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker stop songs-service-plataform-aws || true'
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker rm songs-service-plataform-aws || true'
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker stop list-services-plataform-aws || true'
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker rm list-services-plataform-aws || true'

    - name: Remove old Docker images
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker image prune -f'

    - name: Run new containers
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name video-service-plataform-aws -p 8081:3001 ${{ secrets.DOCKERHUB_USERNAME }}/video-service:latest'
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name songs-service-plataform-aws -p 8083:3003 ${{ secrets.DOCKERHUB_USERNAME }}/songs-service:latest'
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name list-services-plataform-aws -p 8082:3002 ${{ secrets.DOCKERHUB_USERNAME }}/list-services:latest'
